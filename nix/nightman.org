
* TODOs
Add pid checks on a timer

* The Nightman

The Nightman Cometh
   for secrets that shouldn't be out after dark.

Check out secrets from the Nightman. Don't keep them longer than you
need them or he will take his secrets back forcibly.

Here is how the Nightman keeps track of his records.

In the beginning, the Nightman has all secrets under control.
- To decrypt a secret, 'checkout' a file. If necessary, be ready with
  authentication.*
- When you are done with your secret, appease the Nightman by 'return'ing
  the file
- To clear stale locks, use 'flush'

Note: Authentication is only necessary when the secret is not already decrypted.

#+NAME: includes
#+BEGIN_SRC sh :tangle nightman
  source $HOME/Dropbox/config/bash/bash.io.sh
#+END_SRC

#+NAME: variables
#+BEGIN_SRC sh :tangle nightman
  nightman_prefix="/tmp/nightman/"
#+END_SRC

#+NAME: commands
#+BEGIN_SRC sh :tangle nightman
  function lock() {
      file=$(replace_substring $1 \\/ ..)
      touch ${nightman_prefix}.`ls ${nightman_prefix}*${file} 2>/dev/null | wc -l`.${file}
  }

  function unlock() {
      file=$(replace_substring ${1%.gpg} \\/ ..)  # Drop the .gpg extension, if present
      rm `ls ${nightman_prefix}*${file} 2>/dev/null | tail -n1` 2>/dev/null
      [[ `ls ${nightman_prefix}*${file} 2>/dev/null` ]] || ${destroy} ${1%.gpg} 2>/dev/null
  }

  function replace_substring() { echo `echo $1 | sed s/$2/$3/g` ; }

  destroy="shred -fuz"
  decrypt="gpg --batch -q"
#+END_SRC

Now to handle requests by action

#+BEGIN_SRC sh :tangle nightman
    function crypt() {
        unset encrypt query;
        case $1 in
            e|en|encrypt) encrypt=1 ;;
        esac; shift

        if [[ $encrypt ]]; then
            for arg; do         # Determine if authentication is necessary
                [[ -z $query && ${arg} && -e ${arg%.gpg} ]] || query=1 # Does each file exist?
            done
        fi

        while [[ $1 ]]; do
            [[ $query ]] && query_password # Prompt user if necessary

            # If the secret is not out of the bottle, let it out
            if [[ $encrypt && $query && ! -e ${1%.gpg} ]]; then
                gpg --batch -q --passphrase=${secret_passwd} -o ${1%.gpg} --decrypt ${1}
                if [[ -e ${1%.gpg} ]]; then
                    chmod 600 ${1%.gpg} 2>/dev/null # protect with permissions
                else                                # wrong passwd?
                    continue
                fi
            fi

            # Inside this block, lock or unlock the file
            if [[ $encrypt ]]; then
                lock ${1%.gpg}
            else
                unlock $1
            fi
            shift
        done
    }

    case $1 in

        c|checkout) shift
            crypt encrypt $@ ;;

        r|return) shift
            crypt decrypt $@ ;;

        f|flush) shift
            pushd `dirname $0` &>/dev/null
            for file in `ls ${nightman_prefix}* 2>/dev/null`; do
                name=${file#${nightman_prefix}.}
                ${destroy} $(replace_substring ${name#*.} "\.\." "\\/") &>/dev/null
                rm ${file} 2>/dev/null
            done
            popd &>/dev/null
            ;;

        ""|h|help)
            cat <<EOF

      The Nightman Cometh
         for secrets that shouldn't be out after dark.

      Check out secrets from the Nightman. Don't keep them longer than you
      need them or he will take his secrets back forcibly.

      Here is how the Nightman keeps track of his records.

      In the beginning, the Nightman has all secrets under control.
      - To decrypt a secret, 'checkout' a file. If necessary, be ready with
        authentication.*
      - When you are done with your secret, appease the Nightman by 'return'ing
        the file
      - To clear bad locks, use 'flush'

        ,*Authentication is only necessary when the secret is not already decrypted.

  EOF

  exit 1 ;;

        ,*) section "Unrecognized directive: $1"
            echo "Aborting" && exit 1 ;;
    esac
#+END_SRC
